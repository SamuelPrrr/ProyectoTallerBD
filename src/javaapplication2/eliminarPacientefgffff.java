/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication2;
import com.mysql.cj.x.protobuf.MysqlxSql;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Odimarys Erazo
 */
public class eliminarPacientefgffff extends javax.swing.JFrame {

    /**
     * Creates new form eliminarPaciente
     */
    public eliminarPacientefgffff() {
        initComponents();
        
    }
    
    private Connection conn;
    private void conectarDB(){
    try{
        String url="jdbc:mysql://localhost:3306/hospitales";
        String user="root";
        String pass="odimaryserazo29";
        conn = DriverManager.getConnection(url,user,pass);
    }catch (SQLException e){
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error conectar db");
    }
    }
    
    private void borrar() throws SQLException{
    String id="P001";
               String query = "delete from pacientes where idPaciente ="+id;
               Statement stmt =conn.createStatement();
               ResultSet rs= stmt.executeQuery(query);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID paciente", "Nombre", "Año_Ingreso", "Edad", "sexo ", "direccion ", "IDciudad", "IDEtapaVida", "Telefono"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("ID paciente");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Nombre");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Año_Ingreso");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Edad");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("sexo ");
            jTable1.getColumnModel().getColumn(5).setHeaderValue("direccion ");
            jTable1.getColumnModel().getColumn(6).setHeaderValue("IDciudad");
            jTable1.getColumnModel().getColumn(7).setHeaderValue("IDEtapaVida");
            jTable1.getColumnModel().getColumn(8).setHeaderValue("Telefono");
        }

        jButton1.setText("ELIMINAR");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SELECCIONAR");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jButton1)
                        .addGap(59, 59, 59)
                        .addComponent(jButton2)))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void mostrarDatos(){
        String nombrePaciente = jTable1.getColumnName(NORMAL);
        //Verificar que el campo no esté vacio
        if (nombrePaciente.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Por favor ingresa el nombre del paciente");
            return;
        }
        
        //Consulta MySQL para buscar pacientes por nombre
        String query = "SELECT * FROM pacientes";
        
        //Obtener la conexión a la base de datos
        Connection conn = null;
        
        try {
            //Preparar la consulta usando PreparedStatement
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, "%" + nombrePaciente + "%");
            
            //Se ejecuta la consulta
            ResultSet rs = pst.executeQuery();
            
            //Obtener los datos de la consulta (para saber cuántas columnas tiene)
            ResultSetMetaData metadatos = rs.getMetaData();
            int contadorcolumnas = metadatos.getColumnCount();
            
            //Crear un modelo para la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            
            //Limpiar la tabla antes de agregar nuevos datos
            modelo.setRowCount(0);
            
            //Recorrer el ResultSet y agregar cada fila al modelo de la tabla
            while (rs.next()) {
                Object[] filasdedatos = new Object[contadorcolumnas];
                for (int i = 1; i <= contadorcolumnas; i++){
                    filasdedatos[i - 1] = rs.getObject(i); //Obtiene el valor de cada columna
                }
                modelo.addRow(filasdedatos); //Agregar la fila al modelo de la tabla
            }
            
            //Cerrar el ResultSet y el PreparedStatement
            rs.close();
            pst.close();
            conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al realizar la consulta: " + ex.getMessage());
        }
    }                                     
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            borrar();
        } catch (SQLException ex) {
            Logger.getLogger(eliminarPacientefgffff.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        // Inside the eliminarPaciente class
    int selectedRow = jTable1.getSelectedRow();
    
    if (selectedRow != -1) {
        // Get the patient ID from the selected row
        String patientId = jTable1.getValueAt(selectedRow, 0).toString(); // Assuming the ID is in the first column
        
        // Delete the patient with the retrieved ID
        try {
            borrar(patientId); // Pass the patient ID to the borrar method
            JOptionPane.showMessageDialog(this, "Paciente eliminado con éxito.");
            // Optionally, refresh the table after deletion
            refreshTable();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al eliminar el paciente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un paciente para eliminar.");
    }
}

// Modify the borrar method to accept a patient ID
private void borrar(String patientId) throws SQLException {
    String query = "DELETE FROM pacientes WHERE idPaciente = ?";
    PreparedStatement stmt = conn.prepareStatement(query);
    stmt.setString(1, patientId); // Set the ID parameter
    int rowsAffected = stmt.executeUpdate(); // Execute update, not query

    if (rowsAffected > 0) {
        System.out.println("Paciente eliminado.");
    } else {
        System.out.println("No se encontró el paciente.");
    }
}

// Method to refresh the table (this can be expanded based on the actual logic)
private void refreshTable() {
    // Logic to refresh the jTable1 with updated data from the database      
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(eliminarPacientefgffff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(eliminarPacientefgffff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(eliminarPacientefgffff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(eliminarPacientefgffff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new eliminarPacientefgffff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
