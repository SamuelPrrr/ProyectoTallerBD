/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication2;
import java.awt.Color;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JComboBox;


/**
 *
 * @author samuel
 */
public class POSTFACTURAS extends javax.swing.JFrame {
    private static Connection con;
    private static final String driver = "com.mysql.cj.jdbc.Driver";
    private static final String user = "samuel";
    private static final String password = "password";
    private static final String url = "jdbc:mysql://127.0.0.1/Hospitales";
    
    
    public void conector(){
    con = null;
    try{
        Class.forName(driver);
        con = (Connection) DriverManager.getConnection(url, user, password);
        if(con!=null){
            
        }
    }
    catch(ClassNotFoundException | SQLException e){
        JOptionPane.showMessageDialog(null, "Hubo un error en la Base de datos");
    }
    }
    /**
     * Creates new form INSERTAR
     */
    public POSTFACTURAS() {
        initComponents();
        JPanelImage fondoImg = new JPanelImage(fondo, "img/hospitalback.jpg");
        fondo.add(fondoImg).repaint();
        fondo.setOpaque(false);
        fondo.setBorder(null);
        fondo.setBackground(new Color(0,0,0,0));
        //Llenar los combo box
        llenarComboBox("estados", "nombre", comboBoxEstados);
        llenarComboBox("pacientes", "nombre", comboBoxPaciente);
      }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Registrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        iva = new javax.swing.JTextField();
        Volver = new javax.swing.JButton();
        comboBoxCiudades = new javax.swing.JComboBox<>();
        comboBoxHospital = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        IdFactura = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comboBoxEstados = new javax.swing.JComboBox<>();
        comboBoxPaciente = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buscarHosp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Yrsa SemiBold", 1, 24)); // NOI18N
        jLabel1.setText("Registrar Facturas");

        Registrar.setText("Registrar");
        Registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistrarActionPerformed(evt);
            }
        });

        jLabel2.setText("Subtotal::");

        jLabel4.setText("IVA:");

        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });

        comboBoxCiudades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCiudadesActionPerformed(evt);
            }
        });

        comboBoxHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxHospitalActionPerformed(evt);
            }
        });

        jLabel6.setText("ID:");

        jLabel7.setText("Ciudad:");

        jLabel10.setText("Estado:");

        comboBoxEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEstadosActionPerformed(evt);
            }
        });

        comboBoxPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPacienteActionPerformed(evt);
            }
        });

        jLabel8.setText("Hospital:");

        jLabel9.setText("Paciente:");

        buscarHosp.setText("Buscar hospitales en la zona");
        buscarHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarHospActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Volver))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(jLabel1)))
                .addContainerGap(381, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                .addContainerGap(451, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(51, 51, 51)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(subtotal)
                                .addComponent(comboBoxCiudades, 0, 240, Short.MAX_VALUE)
                                .addComponent(comboBoxHospital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(IdFactura, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboBoxEstados, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboBoxPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(iva, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                        .addComponent(Registrar)
                        .addGap(187, 187, 187))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(buscarHosp)
                .addGap(134, 134, 134))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(Volver)
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(IdFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(27, 27, 27)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(iva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboBoxEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxCiudades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarHosp)
                .addGap(15, 15, 15)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(comboBoxHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboBoxPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(92, 92, 92)
                .addComponent(Registrar)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        INSERTAR nuevoFrame = new INSERTAR();
        nuevoFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_VolverActionPerformed

    public class ComboItem {
    private String key;
    private String value;

    public ComboItem(String key, String value) {
        this.key = key;
        this.value = value;
    }

    @Override
    public String toString() {
        return value;
    }

    public String getKey() {
        return key;
    }
}

private void llenarComboBox(String tabla, String valor, JComboBox combo) {
    conector(); // Llamar al método de conexión
    String sql = "SELECT * FROM " + tabla; // Nota el espacio después de FROM
    try (Statement st = con.createStatement(); 
         ResultSet rs = st.executeQuery(sql)) { // Crear Statement y ejecutar la consulta
        while(rs.next()) {
            combo.addItem(rs.getString(valor)); // Usar el ResultSet para obtener el valor
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.toString());
    }
}

    private void llenarComboBoxCiudades(String idEstado) {
         comboBoxCiudades.removeAllItems(); // Limpiar el comboBox de ciudades antes de llenarlo
    String sql = "SELECT nombre FROM ciudades WHERE idEstado = ?"; // Utilizar PreparedStatement

    try (PreparedStatement ps = con.prepareStatement(sql)) {
        ps.setString(1, idEstado); // Establecer el valor de idEstado en la consulta
        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                comboBoxCiudades.addItem(rs.getString("nombre")); // Llenar el comboBox de ciudades con los nombres
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error llenando ciudades: " + e.toString());
    }
    }
    
    private void llenarComboBoxHospitales(String idCiudad) {
         comboBoxCiudades.removeAllItems(); // Limpiar el comboBox de ciudades antes de llenarlo
    String sql = "SELECT nombre FROM hospitales WHERE idCiudad = ?"; // Utilizar PreparedStatement

    try (PreparedStatement ps = con.prepareStatement(sql)) {
        ps.setString(1, idCiudad); // Establecer el valor de idEstado en la consulta
        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                comboBoxHospital.addItem(rs.getString("nombre")); // Llenar el comboBox de ciudades con los nombres
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error llenando hospitales: " + e.toString());
    }
    }

    private void comboBoxHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxHospitalActionPerformed
         
    }//GEN-LAST:event_comboBoxHospitalActionPerformed

    private void comboBoxEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEstadosActionPerformed
       String idEstado = "";
    String estado = comboBoxEstados.getSelectedItem().toString(); // Obtener el estado seleccionado
    String sql = "SELECT idEstado FROM estados WHERE nombre = ?"; // Usar un placeholder en la consulta

    try (PreparedStatement ps = con.prepareStatement(sql)) {
        ps.setString(1, estado); // Establecer el valor del estado en la consulta
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                idEstado = rs.getString("idEstado"); // Obtener el idEstado si existe un resultado
            } else {
                System.out.println("No se encontró un idEstado para el estado seleccionado."); // Mensaje si no hay coincidencia
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error recuperando idEstado: " + e.getMessage());
    }
    llenarComboBoxCiudades(idEstado); // Llenar el ComboBox de ciudades con el idEstado obtenido
    }//GEN-LAST:event_comboBoxEstadosActionPerformed

    private void RegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistrarActionPerformed
        //Busqueda del IdCIudad
        String IDhosp = "";
        String hosp = comboBoxHospital.getSelectedItem().toString(); // Obtener el estado seleccionado
        String sqlBusqueda = "SELECT idHosp FROM hospitales WHERE nombre = ?"; // Usar un placeholder en la consulta
        try (PreparedStatement ps = con.prepareStatement(sqlBusqueda)) {
            ps.setString(1, hosp); // Establecer el valor del estado en la consulta
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    IDhosp = rs.getString("idHosp"); // Obtener el idEstado si existe un resultado
                } else {
                    System.out.println("No se encontró un hospital para lo seleccionado."); // Mensaje si no hay coincidencia
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error recuperando el hospital: " + e.getMessage());
        }
        
        String IDpac = "";
        String paciente = comboBoxPaciente.getSelectedItem().toString(); // Obtener el estado seleccionado
        String sqlBusquedaa = "SELECT idPaciente FROM pacientes WHERE nombre = ?"; // Usar un placeholder en la consulta
        try (PreparedStatement ps = con.prepareStatement(sqlBusquedaa)) {
            ps.setString(1, paciente); // Establecer el valor del estado en la consulta
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    IDpac = rs.getString("idPaciente"); // Obtener el idEstado si existe un resultado
                } else {
                    System.out.println("No se encontró un paciente para lo seleccionado."); // Mensaje si no hay coincidencia
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error recuperando el paciente: " + e.getMessage());
        }
        

        //Insercion
        conector();
        String sql = "INSERT INTO facturas (idFactura, fecha, hora, idHosp, idPaciente, subtotal, iva, total) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = con.prepareStatement(sql)) {
            // Establecer los valores de los parámetros de la consulta
            double subtotall = Double.parseDouble(subtotal.getText());
            double ivaa = Double.parseDouble(iva.getText()) / 100;
            double ivaaa = subtotall * ivaa;
            double total  = subtotall + ivaaa;
            // Obtener la fecha y hora actuales
            LocalDateTime now = LocalDateTime.now();
    
            // Formatear la fecha y hora a un formato adecuado para la base de datos
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    
    String fechaActual = now.format(dateFormatter); // Formato de fecha: YYYY-MM-DD
    String horaActual = now.format(timeFormatter);  // Formato de hora: HH:MM:SS
            preparedStatement.setString(1, IdFactura.getText());
            preparedStatement.setString(2, fechaActual);
            preparedStatement.setString(3, horaActual);
            preparedStatement.setString(4, IDhosp );
            preparedStatement.setString(5, IDpac);
            preparedStatement.setDouble(6, subtotall);
            preparedStatement.setDouble(7, ivaa);
            preparedStatement.setDouble(8, total);

            // Ejecutar la consulta de inserción
            int filasInsertadas = preparedStatement.executeUpdate();

            // Comprobar si la inserción fue exitosa
            if (filasInsertadas > 0) {
                System.out.println("Inserción exitosa");
                JOptionPane.showMessageDialog(rootPane, "Factura agregada");
            } else {
                System.out.println("No se pudo insertar el registro");
            }
        } catch (SQLException ex) {
            Logger.getLogger(POSTFACTURAS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RegistrarActionPerformed

    private void comboBoxPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxPacienteActionPerformed

    private void comboBoxCiudadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCiudadesActionPerformed
       
    }//GEN-LAST:event_comboBoxCiudadesActionPerformed

    private void buscarHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarHospActionPerformed
        comboBoxHospital.removeAllItems();
        String idCiudad = "";
    String ciudad = comboBoxCiudades.getSelectedItem().toString(); // Obtener el estado seleccionado
    String sql = "SELECT idCiudad FROM ciudades WHERE nombre = ?"; // Usar un placeholder en la consulta

    try (PreparedStatement ps = con.prepareStatement(sql)) {
        ps.setString(1, ciudad); // Establecer el valor del estado en la consulta
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                idCiudad = rs.getString("idCiudad"); // Obtener el idEstado si existe un resultado
            } else {
                System.out.println("No se encontró una ciudad para lo seleccionado."); // Mensaje si no hay coincidencia
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error recuperando la ciudad: " + e.getMessage());
    }
    llenarComboBoxHospitales(idCiudad); // Llenar el ComboBox de ciudades con el idEstado obtenido
    }//GEN-LAST:event_buscarHospActionPerformed

 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new POSTFACTURAS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IdFactura;
    private javax.swing.JButton Registrar;
    private javax.swing.JButton Volver;
    private javax.swing.JButton buscarHosp;
    private javax.swing.JComboBox<String> comboBoxCiudades;
    private javax.swing.JComboBox<String> comboBoxEstados;
    private javax.swing.JComboBox<String> comboBoxHospital;
    private javax.swing.JComboBox<String> comboBoxPaciente;
    private javax.swing.JPanel fondo;
    private javax.swing.JTextField iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField subtotal;
    // End of variables declaration//GEN-END:variables
}
