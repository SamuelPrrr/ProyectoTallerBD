/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication2;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author reymi
 */
public class ConsultasGenerales extends javax.swing.JFrame {

    /**
     * Creates new form ConsultasGenerales
     */
    public ConsultasGenerales() {
        initComponents();
        llenarComboBoxTablas(); // Llenar el ComboBox con nombres de tablas
        configurarComboBox(); // Configurar el ActionListener del ComboBox
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        atras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Consultas Generales");

        jLabel2.setText("TABLAS:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("CONSULTA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        atras.setText("atras");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(atras)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(atras))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Obtiene el ID ingresado en el jTextArea
    String idIngresado = jTextField1.getText().trim();
    
    // Obtiene el nombre de la tabla seleccionada en el jComboBox1
    String tablaSeleccionada = (String) jComboBox1.getSelectedItem();
    
    // Verificar que se haya ingresado un ID y seleccionado una tabla
    if (idIngresado.isEmpty() || tablaSeleccionada == null) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID y seleccione una tabla.");
        return;
    }
    
    // Construir la consulta para seleccionar los datos basados en el ID
    String query = "SELECT * FROM " + tablaSeleccionada + " WHERE ";
    
    // Define la columna ID dependiendo de la tabla seleccionada
    String columnaID = "";
    switch (tablaSeleccionada.toLowerCase()) {
        case "estados":
            columnaID = "idEstado";
            break;
        case "ciudades":
            columnaID = "idCiudad";
            break;
        case "hospitales":
            columnaID = "idHosp";
            break;
        case "doctores":
            columnaID = "idDoctor";
            break;
        case "desarrollofisico":
            columnaID = "idEtapaVida";
            break;
        case "pacientes":
            columnaID = "idPaciente";
            break;
        case "facturas":
            columnaID = "idFactura";
            break;
        case "conceptos":
            columnaID = "idConcepto";
            break;
        case "factdetalle":
            columnaID = "idFactura"; // Aquí puede que necesites considerar ambos ID (idFactura, idConcepto)
            break;
        default:
            JOptionPane.showMessageDialog(this, "Tabla no reconocida.");
            return;
    }
    
    // Completa la consulta para buscar por el ID especificado
    query += columnaID + " = ?";
    
    // Ejecutar la consulta
    Connection con = BDConexion.conectar();
    
    try {
        PreparedStatement stmt = con.prepareStatement(query);
        stmt.setString(1, idIngresado); // Se asigna el ID ingresado en el WHERE de la consulta
        ResultSet rs = stmt.executeQuery();
        
        // Utilizar ResultSetMetaData para obtener el número de columnas y nombres de columnas
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();
        
        // Crear el modelo de la tabla
        DefaultTableModel model = new DefaultTableModel();
        
        // Agregar las columnas al modelo de la tabla
        for (int i = 1; i <= columnCount; i++) {
            model.addColumn(metaData.getColumnName(i));
        }
        
        // Agregar las filas al modelo de la tabla
        while (rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                rowData[i - 1] = rs.getObject(i);
            }
            model.addRow(rowData);
        }
        
        // Asignar el modelo a la jTable1
        jTable1.setModel(model);
        
        rs.close();
        stmt.close();
        con.close();
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
        main nuevoFrame = new main();
        nuevoFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_atrasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultasGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultasGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultasGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultasGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultasGenerales().setVisible(true);
            }
        });
    }
    
    // Este método se puede llamar en el constructor o en el método initComponents()
private void llenarComboBoxTablas() {
    Connection con = BDConexion.conectar();
    String query = "SHOW TABLES"; // Consulta para obtener los nombres de las tablas
    
    try {
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        
        while (rs.next()) {
            jComboBox1.addItem(rs.getString(1)); // Agregar cada nombre de tabla al ComboBox
        }
        
        rs.close();
        stmt.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

// Método para configurar el ActionListener del jComboBox
private void configurarComboBox() {
    jComboBox1.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Obtiene el nombre de la tabla seleccionada en el ComboBox
            String tablaSeleccionada = (String) jComboBox1.getSelectedItem();
            if (tablaSeleccionada != null) {
                mostrarDatosTabla(tablaSeleccionada);
            }
        }
    });
}

// Método para mostrar los datos de la tabla seleccionada en el jTable
private void mostrarDatosTabla(String nombreTabla) {
    Connection con = BDConexion.conectar();
    String query = "SELECT * FROM " + nombreTabla; // Construye la consulta para seleccionar todo de la tabla

    try {
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);
        
        // Utilizar ResultSetMetaData para obtener el número de columnas y nombres de columnas
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();
        
        // Crear el modelo de la tabla
        DefaultTableModel model = new DefaultTableModel();
        
        // Agregar las columnas al modelo de la tabla
        for (int i = 1; i <= columnCount; i++) {
            model.addColumn(metaData.getColumnName(i));
        }
        
        // Agregar las filas al modelo de la tabla
        while (rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                rowData[i - 1] = rs.getObject(i);
            }
            model.addRow(rowData);
        }
        
        // Asignar el modelo a la jTable
        jTable1.setModel(model);
        
        rs.close();
        stmt.close();
        con.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atras;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
