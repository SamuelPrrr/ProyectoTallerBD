package javaapplication2;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author reymi
 */
public class CONSULTAS extends javax.swing.JFrame {
    
    /**
     * Creates new form CONSULTAS
     */
    public CONSULTAS() {
        initComponents();
        BDConexion dbc = new BDConexion();
        dbc.conectar();
        llenarComboBox();//Llenar el ComboBox al iniciar el formulario
        initComboBoxListener(); // Configurar el evento para actualizar jTextField2
        llenarComboBoxNombres(); // Llenar jComboBox2 con nombres de pacientes al iniciar el formulario
        configurarComboBoxNombre();//Configurar el evento para actualizar el jTextField1
        llenarComboBoxHospTipo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        comboTipoHosp = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("VOLVER");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yrsa SemiBold", 1, 24)); // NOI18N
        jLabel1.setText("Consultas BD \"Hospitales\"");

        jLabel2.setText("NOMBRE:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idPaciente", "nombre", "edad", "sexo", "idCiudad", "idEtapaVida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jScrollPane2.setViewportView(jScrollPane1);

        jButton2.setText("CONSULTAR POR NOMBRE");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel3.setText("ID:");

        jButton3.setText("CONSULTAR POR ID");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Etapa de Vida"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jButton4.setText("OBTENER");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("OBTENER");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Paciente"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel4.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel4.setText("Monto total facturado por cada concepto ");

        jLabel5.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel5.setText("Nombres de pacientes atendidos en un hospital de:");

        jLabel6.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel6.setText("Consulta que obtenga nombre de hospital, nombre del doctor y nombre   ");

        jButton6.setText("OBTENER");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Hospital", "Nombre Doctor", "Nombre Paciente", "Monto Facturado"
            }
        ));
        jScrollPane5.setViewportView(jTable4);

        jLabel7.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel7.setText("Etapa de vida de cada paciente");

        jButton7.setText("OBTENER");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel8.setText("de cada hospital por cada año ");

        jLabel9.setFont(new java.awt.Font("Yrsa SemiBold", 1, 14)); // NOI18N
        jLabel9.setText("del paciente indicando el monto facturado entre si");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre Hospital", "Año", "Nombre Concepto", "Monto Total Facturado"
            }
        ));
        jScrollPane6.setViewportView(jTable5);

        comboTipoHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoHospActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSeparator4)
                                .addComponent(jButton1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jButton3))
                                .addComponent(jButton2)
                                .addComponent(jScrollPane2)
                                .addComponent(jSeparator1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboTipoHosp, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton5))
                                .addComponent(jLabel6)
                                .addComponent(jButton6)
                                .addComponent(jScrollPane5))
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jLabel4)
                            .addComponent(jButton7)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jButton1)
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton3)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(comboTipoHosp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void llenarComboBox(){
        Connection con = BDConexion.conectar(); // Conexión a la base de datos
        String query = "SELECT idPaciente FROM pacientes ORDER BY idPaciente"; // Consulta para obtener los IDs

    try {
        Statement stmt = con.createStatement(); // Crear el Statement para la consulta
        ResultSet rs = stmt.executeQuery(query); // Ejecutar la consulta

        jComboBox1.removeAllItems(); // Limpiar el jComboBox1 antes de llenarlo

        while (rs.next()) {
            String idPaciente = rs.getString("idPaciente"); // Obtener cada idPaciente
            jComboBox1.addItem(idPaciente); // Agregar cada id al jComboBox1
        }

        rs.close(); // Cerrar ResultSet
        stmt.close(); // Cerrar Statement
        con.close(); // Cerrar conexión
    } catch (SQLException e) {
        e.printStackTrace(); // Imprimir errores de SQL en caso de que ocurran
    }
    }
    
    private void llenarComboBoxNombres(){
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try {
        con = BDConexion.conectar(); // Conectar a la base de datos
        String sql = "SELECT nombre FROM pacientes ORDER BY nombre"; // Consulta para obtener los nombres de los pacientes en orden
        ps = con.prepareStatement(sql);
        rs = ps.executeQuery();
        
        // Limpiar cualquier ítem previo en el ComboBox
        jComboBox2.removeAllItems();
        
        // Agregar los nombres obtenidos al ComboBox
        while (rs.next()) {
            String nombrePaciente = rs.getString("nombre");
            jComboBox2.addItem(nombrePaciente);
        }
        
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        // Cerrar las conexiones
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }
    
    private void initComboBoxListener(){
        jComboBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedId = (String) jComboBox1.getSelectedItem(); // Obtener el ID seleccionado
                jTextField2.setText(selectedId); // Mostrar el ID en jTextField2
            }
        });
    }
    
    private void configurarComboBoxNombre(){
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String nombreSeleccionado = (String) jComboBox2.getSelectedItem(); // Obtener el nombre seleccionado
                jTextField1.setText(nombreSeleccionado); // Mostrar el nombre en jTextField1
            }
        });
    }
    
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        main nuevoFrame = new main();
        nuevoFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        //Obtener el texto ingresado en el campo de texto
        String nombrePaciente = jTextField1.getText();
        
        //Verificar que el campo no esté vacio
        if (nombrePaciente.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Por favor ingresa el nombre del paciente");
            return;
        }
        
        //Consulta MySQL para buscar pacientes por nombre
        String query = "SELECT * FROM pacientes WHERE nombre LIKE ?";
        
        //Obtener la conexión a la base de datos
        Connection con = BDConexion.conectar();
        try {
            //Preparar la consulta usando PreparedStatement
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, "%" + nombrePaciente + "%");
            
            //Se ejecuta la consulta
            ResultSet rs = pst.executeQuery();
            
            //Obtener los datos de la consulta (para saber cuántas columnas tiene)
            ResultSetMetaData metadatos = rs.getMetaData();
            int contadorcolumnas = metadatos.getColumnCount();
            
            //Crear un modelo para la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            
            //Limpiar la tabla antes de agregar nuevos datos
            modelo.setRowCount(0);
            
            //Recorrer el ResultSet y agregar cada fila al modelo de la tabla
            while (rs.next()) {
                Object[] filasdedatos = new Object[contadorcolumnas];
                for (int i = 1; i <= contadorcolumnas; i++){
                    filasdedatos[i - 1] = rs.getObject(i); //Obtiene el valor de cada columna
                }
                modelo.addRow(filasdedatos); //Agregar la fila al modelo de la tabla
            }
            
            //Cerrar el ResultSet y el PreparedStatement
            rs.close();
            pst.close();
            con.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al realizar la consulta: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        //Obtener el texto ingresado en el campo de texto
        String idPaciente = jTextField2.getText();
        
        //Verificar que el campo no esté vacio
        if (idPaciente.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "Por favor ingresa el id del paciente");
            return;
        }
        
        //Consulta MySQL para buscar pacientes por nombre
        String query = "SELECT * FROM pacientes WHERE idPaciente = ?";
        
        //Obtener la conexión a la base de datos
        Connection con = BDConexion.conectar();
        try {
            //Preparar la consulta usando PreparedStatement
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, idPaciente);
            
            //Se ejecuta la consulta
            ResultSet rs = pst.executeQuery();
            
            //Obtener los datos de la consulta (para saber cuántas columnas tiene)
            ResultSetMetaData metadatos = rs.getMetaData();
            int contadorcolumnas = metadatos.getColumnCount();
            
            //Crear un modelo para la tabla
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            
            //Limpiar la tabla antes de agregar nuevos datos
            modelo.setRowCount(0);
            
            //Recorrer el ResultSet y agregar cada fila al modelo de la tabla
            while (rs.next()) {
                Object[] filasdedatos = new Object[contadorcolumnas];
                for (int i = 1; i <= contadorcolumnas; i++){
                    filasdedatos[i - 1] = rs.getObject(i); //Obtiene el valor de cada columna
                }
                modelo.addRow(filasdedatos); //Agregar la fila al modelo de la tabla
            }
            
            //Cerrar el ResultSet y el PreparedStatement
            rs.close();
            pst.close();
            con.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Error al realizar la consulta: " + ex.getMessage());
        }
        
        jTextField2.setText("");
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        Connection con = BDConexion.conectar();
        String query = "SELECT pacientes.nombre, desarrollofisico.nombre as EtapaDeVida " +
                        "FROM desarrollofisico, pacientes " +
                        "WHERE pacientes.idEtapaVida = desarrollofisico.idEtapaVida " +
                        "ORDER BY desarrollofisico.nombre DESC, pacientes.nombre ASC";
        
        try {
            // Preparar la consulta
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
        
            // Crear un modelo para la jTable
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Nombre");
            model.addColumn("Etapa de Vida");
        
            // Recorrer el ResultSet y agregar los datos al modelo
            while (rs.next()) {
                String nombre = rs.getString("nombre");
                String etapaDeVida = rs.getString("EtapaDeVida");
                model.addRow(new Object[]{nombre, etapaDeVida});
            }
            
            //Asiganr el modelo a la JTable
            jTable2.setModel(model);
            
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al realizar la consulta");
        } finally {
            try {
                if (con != null){
                con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
  
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
         Connection con = BDConexion.conectar();
    String tipo = (String) comboTipoHosp.getSelectedItem(); // Obtiene el tipo seleccionado del JComboBox
    String query = "SELECT pacientes.nombre AS NombrePaciente " +
                   "FROM hospitales, pacientes, facturas " +
                   "WHERE hospitales.tipo = ? " +  // Usar un parámetro en la consulta
                   "AND facturas.idHosp = hospitales.idHosp " +
                   "AND facturas.idPaciente = pacientes.idPaciente";
    
    try {
        // Preparar la consulta con PreparedStatement
        PreparedStatement pst = con.prepareStatement(query);
        pst.setString(1, tipo);  // Asignar el valor del tipo al parámetro "?"

        ResultSet rs = pst.executeQuery();
    
        // Crear un modelo para la jTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Nombre Paciente");
    
        // Recorrer el ResultSet y agregar los datos al modelo
        while (rs.next()) {
            String nombrePaciente = rs.getString("NombrePaciente");
            model.addRow(new Object[]{nombrePaciente});
        }
        
        // Asignar el modelo a la JTable
        jTable3.setModel(model);
        
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al realizar la consulta");
    } finally {
        try {
            if (con != null) {
                con.close();  // Cerrar la conexión en el bloque finally para asegurar que se cierre
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
       
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // TODO add your handling code here:
        Connection con = BDConexion.conectar();
        String query = "SELECT H.nombre AS NombreHospital, D.nombre AS NombreDoctor, " +
                        "P.nombre AS NombrePaciente, SUM(F.total) AS MontoFacturado " +
                        "FROM hospitales H " +
                        "JOIN facturas F ON H.idHosp = F.idHosp " +
                        "JOIN pacientes P ON F.idPaciente = P.idPaciente " +
                        "JOIN factdetalle FD ON F.idFactura = FD.idFactura " +
                        "JOIN doctores D ON FD.idDoctor = D.idDoctor " +
                        "GROUP BY H.nombre, D.nombre, P.nombre " +
                        "ORDER BY H.nombre ASC, D.nombre ASC, P.nombre ASC";

        try {
            // Preparar la consulta
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Crear un modelo para la jTable
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Nombre Hospital");
            model.addColumn("Nombre Doctor");
            model.addColumn("Nombre Paciente");
            model.addColumn("Monto Facturado");

            // Recorrer el ResultSet y agregar los datos al modelo
            while (rs.next()) {
                String nombreHospital = rs.getString("NombreHospital");
                String nombreDoctor = rs.getString("NombreDoctor");
                String nombrePaciente = rs.getString("NombrePaciente");
                double montoFacturado = rs.getDouble("MontoFacturado");

                model.addRow(new Object[]{nombreHospital, nombreDoctor, nombrePaciente, montoFacturado});
            }

            // Asignar el modelo a la jTable
            jTable4.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al realizar la consulta");
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // TODO add your handling code here:
        Connection con = BDConexion.conectar();
        String query = "SELECT H.nombre AS NombreHospital, " +
                        "YEAR(F.fecha) AS Año, " +
                        "C.nombre AS NombreConcepto, " +
                        "SUM(FD.totalConc) AS MontoTotalFacturado " +
                        "FROM hospitales H " +
                        "JOIN facturas F ON H.idHosp = F.idHosp " +
                        "JOIN factdetalle FD ON F.idFactura = FD.idFactura " +
                        "JOIN conceptos C ON FD.idConcepto = C.idConcepto " +
                        "GROUP BY H.nombre, YEAR(F.fecha), C.nombre " +
                        "ORDER BY H.nombre ASC, Año ASC, C.nombre ASC";

        try {
            // Preparar la consulta
            PreparedStatement pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Crear un modelo para la jTable
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Nombre Hospital");
            model.addColumn("Año");
            model.addColumn("Nombre Concepto");
            model.addColumn("Monto Total Facturado");

            // Recorrer el ResultSet y agregar los datos al modelo
            while (rs.next()) {
                String nombreHospital = rs.getString("NombreHospital");
                String anio = rs.getString("Año");
                String nombreConcepto = rs.getString("NombreConcepto");
                double montoTotalFacturado = rs.getDouble("MontoTotalFacturado");

                model.addRow(new Object[]{nombreHospital, anio, nombreConcepto, montoTotalFacturado});
            }

            // Asignar el modelo a la jTable
            jTable5.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al realizar la consulta");
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_jButton7MouseClicked
   
    private void llenarComboBoxHospTipo(){
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try {
        con = BDConexion.conectar(); // Conectar a la base de datos
        String sql = "SELECT tipo FROM hospitales GROUP BY tipo ORDER BY tipo"; // Consulta para obtener los nombres de los pacientes en orden
        ps = con.prepareStatement(sql);
        rs = ps.executeQuery();
        
        // Limpiar cualquier ítem previo en el ComboBox
        comboTipoHosp.removeAllItems();
        
        // Agregar los nombres obtenidos al ComboBox
        while (rs.next()) {
            String nombrePaciente = rs.getString("tipo");
            comboTipoHosp.addItem(nombrePaciente);
        }
        
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        // Cerrar las conexiones
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }
    
    
    private void comboTipoHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoHospActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTipoHospActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CONSULTAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CONSULTAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CONSULTAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CONSULTAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CONSULTAS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboTipoHosp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
